#! /usr/bin/env -S luajit




-- Imports
local neural_net = require("neural_net")




-- Initialization
math.randomseed(os.time())

local nets = {}
for i = 0x01, 0x0400 do nets[i] = neural_net.new(0x02, 0x01, 0x04, 0x02, false) end




-- Machine Learning
for i = 0x01, 0x0800 do


    -- Generation Generation
    for j = 0x02, #nets do nets[j] = nets[0x01]:copy(0.5, 0.5) end


    -- Evaluation
    local fitnesses = {}
    for j = 0x01, #nets do
        fitnesses[j] = 0.0

        for k = 0x01, 0x20 do
            local input = {math.random()/0x02, math.random()/0x02}
            local output = {input[0x01]^0x02+input[0x02]^0x02}
            local result = nets[j]:run(input, neural_net.activ.expit)

            for l = 0x01, #result do
                fitnesses[j] = fitnesses[j]+math.abs(result[l]-output[l])
            end
        end

        fitnesses[j] = 0x01/fitnesses[j]
    end


    -- Generation Sorting
    for j = 0x01, #nets do
        local k = j

        for l = j, #nets do if fitnesses[l] > fitnesses[k] then k = l end end

        fitnesses[j],   fitnesses[k]    = fitnesses[k], fitnesses[j]
        nets[j],        nets[k]         = nets[k],      nets[j]
    end


    -- Output
    io.write(i) io.write(" ") io.write(fitnesses[0x01]) io.write("\r") io.flush()
end




-- Testing
for i = 0x01, 0x08 do
    local input = {math.random()/0x02, math.random()/0x02}
    local output = {input[0x01]^0x02+input[0x02]^0x02}
    local result = nets[0x01]:run(input, neural_net.activ.expit)

    print(table.concat(input, " ").." = "..table.concat(output, " "))
    print(table.concat(input, " ").." = "..table.concat(result, " "))
    print()
end
